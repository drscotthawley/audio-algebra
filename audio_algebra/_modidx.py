# Autogenerated by nbdev

d = { 'settings': { 'branch': 'master',
                'doc_baseurl': '/audio-algebra',
                'doc_host': 'https://drscotthawley.github.io',
                'git_url': 'https://github.com/drscotthawley/audio-algebra',
                'lib_path': 'audio_algebra'},
  'syms': { 'audio_algebra.DiffusionDVAE': { 'audio_algebra.DiffusionDVAE.DiffusionDVAE': ( 'diffusiondvae.html#diffusiondvae',
                                                                                            'audio_algebra/DiffusionDVAE.py'),
                                             'audio_algebra.DiffusionDVAE.DiffusionDVAE.__init__': ( 'diffusiondvae.html#diffusiondvae.__init__',
                                                                                                     'audio_algebra/DiffusionDVAE.py'),
                                             'audio_algebra.DiffusionDVAE.DiffusionDVAE.decode': ( 'diffusiondvae.html#diffusiondvae.decode',
                                                                                                   'audio_algebra/DiffusionDVAE.py'),
                                             'audio_algebra.DiffusionDVAE.DiffusionDVAE.encode': ( 'diffusiondvae.html#diffusiondvae.encode',
                                                                                                   'audio_algebra/DiffusionDVAE.py'),
                                             'audio_algebra.DiffusionDVAE.alpha_sigma_to_t': ( 'diffusiondvae.html#alpha_sigma_to_t',
                                                                                               'audio_algebra/DiffusionDVAE.py'),
                                             'audio_algebra.DiffusionDVAE.get_alphas_sigmas': ( 'diffusiondvae.html#get_alphas_sigmas',
                                                                                                'audio_algebra/DiffusionDVAE.py'),
                                             'audio_algebra.DiffusionDVAE.get_crash_schedule': ( 'diffusiondvae.html#get_crash_schedule',
                                                                                                 'audio_algebra/DiffusionDVAE.py'),
                                             'audio_algebra.DiffusionDVAE.sample': ( 'diffusiondvae.html#sample',
                                                                                     'audio_algebra/DiffusionDVAE.py')},
            'audio_algebra.StackedAELatentDiffusionCond': { 'audio_algebra.StackedAELatentDiffusionCond.LatentAudioDiffusionAutoencoder': ( 'stackedaelatentdiffusioncond.html#latentaudiodiffusionautoencoder',
                                                                                                                                            'audio_algebra/StackedAELatentDiffusionCond.py'),
                                                            'audio_algebra.StackedAELatentDiffusionCond.LatentAudioDiffusionAutoencoder.__init__': ( 'stackedaelatentdiffusioncond.html#latentaudiodiffusionautoencoder.__init__',
                                                                                                                                                     'audio_algebra/StackedAELatentDiffusionCond.py'),
                                                            'audio_algebra.StackedAELatentDiffusionCond.LatentAudioDiffusionAutoencoder.decode': ( 'stackedaelatentdiffusioncond.html#latentaudiodiffusionautoencoder.decode',
                                                                                                                                                   'audio_algebra/StackedAELatentDiffusionCond.py'),
                                                            'audio_algebra.StackedAELatentDiffusionCond.LatentAudioDiffusionAutoencoder.encode': ( 'stackedaelatentdiffusioncond.html#latentaudiodiffusionautoencoder.encode',
                                                                                                                                                   'audio_algebra/StackedAELatentDiffusionCond.py'),
                                                            'audio_algebra.StackedAELatentDiffusionCond.LatentAudioDiffusionAutoencoder.load_ema_weights': ( 'stackedaelatentdiffusioncond.html#latentaudiodiffusionautoencoder.load_ema_weights',
                                                                                                                                                             'audio_algebra/StackedAELatentDiffusionCond.py'),
                                                            'audio_algebra.StackedAELatentDiffusionCond.StackedAELatentDiffusionCond': ( 'stackedaelatentdiffusioncond.html#stackedaelatentdiffusioncond',
                                                                                                                                         'audio_algebra/StackedAELatentDiffusionCond.py'),
                                                            'audio_algebra.StackedAELatentDiffusionCond.StackedAELatentDiffusionCond.__init__': ( 'stackedaelatentdiffusioncond.html#stackedaelatentdiffusioncond.__init__',
                                                                                                                                                  'audio_algebra/StackedAELatentDiffusionCond.py'),
                                                            'audio_algebra.StackedAELatentDiffusionCond.StackedAELatentDiffusionCond.configure_optimizers': ( 'stackedaelatentdiffusioncond.html#stackedaelatentdiffusioncond.configure_optimizers',
                                                                                                                                                              'audio_algebra/StackedAELatentDiffusionCond.py'),
                                                            'audio_algebra.StackedAELatentDiffusionCond.StackedAELatentDiffusionCond.decode': ( 'stackedaelatentdiffusioncond.html#stackedaelatentdiffusioncond.decode',
                                                                                                                                                'audio_algebra/StackedAELatentDiffusionCond.py'),
                                                            'audio_algebra.StackedAELatentDiffusionCond.StackedAELatentDiffusionCond.encode': ( 'stackedaelatentdiffusioncond.html#stackedaelatentdiffusioncond.encode',
                                                                                                                                                'audio_algebra/StackedAELatentDiffusionCond.py'),
                                                            'audio_algebra.StackedAELatentDiffusionCond.StackedAELatentDiffusionCond.on_before_zero_grad': ( 'stackedaelatentdiffusioncond.html#stackedaelatentdiffusioncond.on_before_zero_grad',
                                                                                                                                                             'audio_algebra/StackedAELatentDiffusionCond.py'),
                                                            'audio_algebra.StackedAELatentDiffusionCond.StackedAELatentDiffusionCond.training_step': ( 'stackedaelatentdiffusioncond.html#stackedaelatentdiffusioncond.training_step',
                                                                                                                                                       'audio_algebra/StackedAELatentDiffusionCond.py'),
                                                            'audio_algebra.StackedAELatentDiffusionCond.alpha_sigma_to_t': ( 'stackedaelatentdiffusioncond.html#alpha_sigma_to_t',
                                                                                                                             'audio_algebra/StackedAELatentDiffusionCond.py'),
                                                            'audio_algebra.StackedAELatentDiffusionCond.get_alphas_sigmas': ( 'stackedaelatentdiffusioncond.html#get_alphas_sigmas',
                                                                                                                              'audio_algebra/StackedAELatentDiffusionCond.py'),
                                                            'audio_algebra.StackedAELatentDiffusionCond.resample': ( 'stackedaelatentdiffusioncond.html#resample',
                                                                                                                     'audio_algebra/StackedAELatentDiffusionCond.py'),
                                                            'audio_algebra.StackedAELatentDiffusionCond.sample': ( 'stackedaelatentdiffusioncond.html#sample',
                                                                                                                   'audio_algebra/StackedAELatentDiffusionCond.py')},
            'audio_algebra.StackedDiffAE': { 'audio_algebra.StackedDiffAE.LatentAudioDiffusionAutoencoder': ( 'stackeddiffae.html#latentaudiodiffusionautoencoder',
                                                                                                              'audio_algebra/StackedDiffAE.py'),
                                             'audio_algebra.StackedDiffAE.LatentAudioDiffusionAutoencoder.__init__': ( 'stackeddiffae.html#latentaudiodiffusionautoencoder.__init__',
                                                                                                                       'audio_algebra/StackedDiffAE.py'),
                                             'audio_algebra.StackedDiffAE.LatentAudioDiffusionAutoencoder.decode': ( 'stackeddiffae.html#latentaudiodiffusionautoencoder.decode',
                                                                                                                     'audio_algebra/StackedDiffAE.py'),
                                             'audio_algebra.StackedDiffAE.LatentAudioDiffusionAutoencoder.encode': ( 'stackeddiffae.html#latentaudiodiffusionautoencoder.encode',
                                                                                                                     'audio_algebra/StackedDiffAE.py'),
                                             'audio_algebra.StackedDiffAE.LatentAudioDiffusionAutoencoder.load_ema_weights': ( 'stackeddiffae.html#latentaudiodiffusionautoencoder.load_ema_weights',
                                                                                                                               'audio_algebra/StackedDiffAE.py'),
                                             'audio_algebra.StackedDiffAE.StackedAELatentDiffusionCond': ( 'stackeddiffae.html#stackedaelatentdiffusioncond',
                                                                                                           'audio_algebra/StackedDiffAE.py'),
                                             'audio_algebra.StackedDiffAE.StackedAELatentDiffusionCond.__init__': ( 'stackeddiffae.html#stackedaelatentdiffusioncond.__init__',
                                                                                                                    'audio_algebra/StackedDiffAE.py'),
                                             'audio_algebra.StackedDiffAE.StackedAELatentDiffusionCond.configure_optimizers': ( 'stackeddiffae.html#stackedaelatentdiffusioncond.configure_optimizers',
                                                                                                                                'audio_algebra/StackedDiffAE.py'),
                                             'audio_algebra.StackedDiffAE.StackedAELatentDiffusionCond.decode': ( 'stackeddiffae.html#stackedaelatentdiffusioncond.decode',
                                                                                                                  'audio_algebra/StackedDiffAE.py'),
                                             'audio_algebra.StackedDiffAE.StackedAELatentDiffusionCond.encode': ( 'stackeddiffae.html#stackedaelatentdiffusioncond.encode',
                                                                                                                  'audio_algebra/StackedDiffAE.py'),
                                             'audio_algebra.StackedDiffAE.StackedAELatentDiffusionCond.on_before_zero_grad': ( 'stackeddiffae.html#stackedaelatentdiffusioncond.on_before_zero_grad',
                                                                                                                               'audio_algebra/StackedDiffAE.py'),
                                             'audio_algebra.StackedDiffAE.StackedAELatentDiffusionCond.training_step': ( 'stackeddiffae.html#stackedaelatentdiffusioncond.training_step',
                                                                                                                         'audio_algebra/StackedDiffAE.py'),
                                             'audio_algebra.StackedDiffAE.alpha_sigma_to_t': ( 'stackeddiffae.html#alpha_sigma_to_t',
                                                                                               'audio_algebra/StackedDiffAE.py'),
                                             'audio_algebra.StackedDiffAE.get_alphas_sigmas': ( 'stackeddiffae.html#get_alphas_sigmas',
                                                                                                'audio_algebra/StackedDiffAE.py'),
                                             'audio_algebra.StackedDiffAE.sample': ( 'stackeddiffae.html#sample',
                                                                                     'audio_algebra/StackedDiffAE.py')},
            'audio_algebra.aa_effects': { 'audio_algebra.aa_effects.AudioAlgebra': ( 'aa-effects.html#audioalgebra',
                                                                                     'audio_algebra/aa_effects.py'),
                                          'audio_algebra.aa_effects.AudioAlgebra.__init__': ( 'aa-effects.html#audioalgebra.__init__',
                                                                                              'audio_algebra/aa_effects.py'),
                                          'audio_algebra.aa_effects.AudioAlgebra.decode': ( 'aa-effects.html#audioalgebra.decode',
                                                                                            'audio_algebra/aa_effects.py'),
                                          'audio_algebra.aa_effects.AudioAlgebra.encode': ( 'aa-effects.html#audioalgebra.encode',
                                                                                            'audio_algebra/aa_effects.py'),
                                          'audio_algebra.aa_effects.AudioAlgebra.forward': ( 'aa-effects.html#audioalgebra.forward',
                                                                                             'audio_algebra/aa_effects.py'),
                                          'audio_algebra.aa_effects.EmbedBlock': ( 'aa-effects.html#embedblock',
                                                                                   'audio_algebra/aa_effects.py'),
                                          'audio_algebra.aa_effects.EmbedBlock.__init__': ( 'aa-effects.html#embedblock.__init__',
                                                                                            'audio_algebra/aa_effects.py'),
                                          'audio_algebra.aa_effects.EmbedBlock.forward': ( 'aa-effects.html#embedblock.forward',
                                                                                           'audio_algebra/aa_effects.py'),
                                          'audio_algebra.aa_effects.aa_demo': ('aa-effects.html#aa_demo', 'audio_algebra/aa_effects.py'),
                                          'audio_algebra.aa_effects.do_mixing': ( 'aa-effects.html#do_mixing',
                                                                                  'audio_algebra/aa_effects.py'),
                                          'audio_algebra.aa_effects.off_diagonal': ( 'aa-effects.html#off_diagonal',
                                                                                     'audio_algebra/aa_effects.py'),
                                          'audio_algebra.aa_effects.train_aa_model': ( 'aa-effects.html#train_aa_model',
                                                                                       'audio_algebra/aa_effects.py'),
                                          'audio_algebra.aa_effects.vicreg_cov_loss': ( 'aa-effects.html#vicreg_cov_loss',
                                                                                        'audio_algebra/aa_effects.py'),
                                          'audio_algebra.aa_effects.vicreg_var_loss': ( 'aa-effects.html#vicreg_var_loss',
                                                                                        'audio_algebra/aa_effects.py')},
            'audio_algebra.aa_mixer': { 'audio_algebra.aa_mixer.AudioAlgebra': ('aa-mixer.html#audioalgebra', 'audio_algebra/aa_mixer.py'),
                                        'audio_algebra.aa_mixer.AudioAlgebra.__init__': ( 'aa-mixer.html#audioalgebra.__init__',
                                                                                          'audio_algebra/aa_mixer.py'),
                                        'audio_algebra.aa_mixer.AudioAlgebra.decode': ( 'aa-mixer.html#audioalgebra.decode',
                                                                                        'audio_algebra/aa_mixer.py'),
                                        'audio_algebra.aa_mixer.AudioAlgebra.encode': ( 'aa-mixer.html#audioalgebra.encode',
                                                                                        'audio_algebra/aa_mixer.py'),
                                        'audio_algebra.aa_mixer.AudioAlgebra.forward': ( 'aa-mixer.html#audioalgebra.forward',
                                                                                         'audio_algebra/aa_mixer.py'),
                                        'audio_algebra.aa_mixer.DiffusionDVAE': ( 'aa-mixer.html#diffusiondvae',
                                                                                  'audio_algebra/aa_mixer.py'),
                                        'audio_algebra.aa_mixer.DiffusionDVAE.__init__': ( 'aa-mixer.html#diffusiondvae.__init__',
                                                                                           'audio_algebra/aa_mixer.py'),
                                        'audio_algebra.aa_mixer.DiffusionDVAE.decode': ( 'aa-mixer.html#diffusiondvae.decode',
                                                                                         'audio_algebra/aa_mixer.py'),
                                        'audio_algebra.aa_mixer.DiffusionDVAE.decode_it': ( 'aa-mixer.html#diffusiondvae.decode_it',
                                                                                            'audio_algebra/aa_mixer.py'),
                                        'audio_algebra.aa_mixer.DiffusionDVAE.encode': ( 'aa-mixer.html#diffusiondvae.encode',
                                                                                         'audio_algebra/aa_mixer.py'),
                                        'audio_algebra.aa_mixer.DiffusionDVAE.encode_it': ( 'aa-mixer.html#diffusiondvae.encode_it',
                                                                                            'audio_algebra/aa_mixer.py'),
                                        'audio_algebra.aa_mixer.EmbedBlock': ('aa-mixer.html#embedblock', 'audio_algebra/aa_mixer.py'),
                                        'audio_algebra.aa_mixer.EmbedBlock.__init__': ( 'aa-mixer.html#embedblock.__init__',
                                                                                        'audio_algebra/aa_mixer.py'),
                                        'audio_algebra.aa_mixer.EmbedBlock.forward': ( 'aa-mixer.html#embedblock.forward',
                                                                                       'audio_algebra/aa_mixer.py'),
                                        'audio_algebra.aa_mixer.aa_demo': ('aa-mixer.html#aa_demo', 'audio_algebra/aa_mixer.py'),
                                        'audio_algebra.aa_mixer.alpha_sigma_to_t': ( 'aa-mixer.html#alpha_sigma_to_t',
                                                                                     'audio_algebra/aa_mixer.py'),
                                        'audio_algebra.aa_mixer.do_mixing': ('aa-mixer.html#do_mixing', 'audio_algebra/aa_mixer.py'),
                                        'audio_algebra.aa_mixer.get_alphas_sigmas': ( 'aa-mixer.html#get_alphas_sigmas',
                                                                                      'audio_algebra/aa_mixer.py'),
                                        'audio_algebra.aa_mixer.get_crash_schedule': ( 'aa-mixer.html#get_crash_schedule',
                                                                                       'audio_algebra/aa_mixer.py'),
                                        'audio_algebra.aa_mixer.get_stems_faders': ( 'aa-mixer.html#get_stems_faders',
                                                                                     'audio_algebra/aa_mixer.py'),
                                        'audio_algebra.aa_mixer.off_diagonal': ('aa-mixer.html#off_diagonal', 'audio_algebra/aa_mixer.py'),
                                        'audio_algebra.aa_mixer.sample': ('aa-mixer.html#sample', 'audio_algebra/aa_mixer.py'),
                                        'audio_algebra.aa_mixer.train_aa_model': ( 'aa-mixer.html#train_aa_model',
                                                                                   'audio_algebra/aa_mixer.py'),
                                        'audio_algebra.aa_mixer.vicreg_cov_loss': ( 'aa-mixer.html#vicreg_cov_loss',
                                                                                    'audio_algebra/aa_mixer.py'),
                                        'audio_algebra.aa_mixer.vicreg_var_loss': ( 'aa-mixer.html#vicreg_var_loss',
                                                                                    'audio_algebra/aa_mixer.py')},
            'audio_algebra.aa_mixer_toy': { 'audio_algebra.aa_mixer_toy.AudioAlgebra': ( 'aa-mixer-toy.html#audioalgebra',
                                                                                         'audio_algebra/aa_mixer_toy.py'),
                                            'audio_algebra.aa_mixer_toy.AudioAlgebra.__init__': ( 'aa-mixer-toy.html#audioalgebra.__init__',
                                                                                                  'audio_algebra/aa_mixer_toy.py'),
                                            'audio_algebra.aa_mixer_toy.AudioAlgebra.decode': ( 'aa-mixer-toy.html#audioalgebra.decode',
                                                                                                'audio_algebra/aa_mixer_toy.py'),
                                            'audio_algebra.aa_mixer_toy.AudioAlgebra.encode': ( 'aa-mixer-toy.html#audioalgebra.encode',
                                                                                                'audio_algebra/aa_mixer_toy.py'),
                                            'audio_algebra.aa_mixer_toy.AudioAlgebra.forward': ( 'aa-mixer-toy.html#audioalgebra.forward',
                                                                                                 'audio_algebra/aa_mixer_toy.py'),
                                            'audio_algebra.aa_mixer_toy.EmbedBlock': ( 'aa-mixer-toy.html#embedblock',
                                                                                       'audio_algebra/aa_mixer_toy.py'),
                                            'audio_algebra.aa_mixer_toy.EmbedBlock.__init__': ( 'aa-mixer-toy.html#embedblock.__init__',
                                                                                                'audio_algebra/aa_mixer_toy.py'),
                                            'audio_algebra.aa_mixer_toy.EmbedBlock.forward': ( 'aa-mixer-toy.html#embedblock.forward',
                                                                                               'audio_algebra/aa_mixer_toy.py'),
                                            'audio_algebra.aa_mixer_toy.TwistAndScrunch': ( 'aa-mixer-toy.html#twistandscrunch',
                                                                                            'audio_algebra/aa_mixer_toy.py'),
                                            'audio_algebra.aa_mixer_toy.TwistAndScrunch.__init__': ( 'aa-mixer-toy.html#twistandscrunch.__init__',
                                                                                                     'audio_algebra/aa_mixer_toy.py'),
                                            'audio_algebra.aa_mixer_toy.TwistAndScrunch.decode': ( 'aa-mixer-toy.html#twistandscrunch.decode',
                                                                                                   'audio_algebra/aa_mixer_toy.py'),
                                            'audio_algebra.aa_mixer_toy.TwistAndScrunch.encode': ( 'aa-mixer-toy.html#twistandscrunch.encode',
                                                                                                   'audio_algebra/aa_mixer_toy.py'),
                                            'audio_algebra.aa_mixer_toy.TwistAndScrunch.forward': ( 'aa-mixer-toy.html#twistandscrunch.forward',
                                                                                                    'audio_algebra/aa_mixer_toy.py'),
                                            'audio_algebra.aa_mixer_toy.aa_to_inp': ( 'aa-mixer-toy.html#aa_to_inp',
                                                                                      'audio_algebra/aa_mixer_toy.py'),
                                            'audio_algebra.aa_mixer_toy.compressor': ( 'aa-mixer-toy.html#compressor',
                                                                                       'audio_algebra/aa_mixer_toy.py'),
                                            'audio_algebra.aa_mixer_toy.friendly_tanh': ( 'aa-mixer-toy.html#friendly_tanh',
                                                                                          'audio_algebra/aa_mixer_toy.py'),
                                            'audio_algebra.aa_mixer_toy.get_demo_batch': ( 'aa-mixer-toy.html#get_demo_batch',
                                                                                           'audio_algebra/aa_mixer_toy.py'),
                                            'audio_algebra.aa_mixer_toy.get_stems_faders': ( 'aa-mixer-toy.html#get_stems_faders',
                                                                                             'audio_algebra/aa_mixer_toy.py'),
                                            'audio_algebra.aa_mixer_toy.inp_to_aa': ( 'aa-mixer-toy.html#inp_to_aa',
                                                                                      'audio_algebra/aa_mixer_toy.py'),
                                            'audio_algebra.aa_mixer_toy.load_aa_checkpoint': ( 'aa-mixer-toy.html#load_aa_checkpoint',
                                                                                               'audio_algebra/aa_mixer_toy.py'),
                                            'audio_algebra.aa_mixer_toy.multimarkerplot': ( 'aa-mixer-toy.html#multimarkerplot',
                                                                                            'audio_algebra/aa_mixer_toy.py'),
                                            'audio_algebra.aa_mixer_toy.off_diagonal': ( 'aa-mixer-toy.html#off_diagonal',
                                                                                         'audio_algebra/aa_mixer_toy.py'),
                                            'audio_algebra.aa_mixer_toy.plot_kmwq_demo': ( 'aa-mixer-toy.html#plot_kmwq_demo',
                                                                                           'audio_algebra/aa_mixer_toy.py'),
                                            'audio_algebra.aa_mixer_toy.save_aa_checkpoint': ( 'aa-mixer-toy.html#save_aa_checkpoint',
                                                                                               'audio_algebra/aa_mixer_toy.py'),
                                            'audio_algebra.aa_mixer_toy.sayno': ( 'aa-mixer-toy.html#sayno',
                                                                                  'audio_algebra/aa_mixer_toy.py'),
                                            'audio_algebra.aa_mixer_toy.train_aa_vicreg': ( 'aa-mixer-toy.html#train_aa_vicreg',
                                                                                            'audio_algebra/aa_mixer_toy.py'),
                                            'audio_algebra.aa_mixer_toy.vicreg_cov_loss': ( 'aa-mixer-toy.html#vicreg_cov_loss',
                                                                                            'audio_algebra/aa_mixer_toy.py'),
                                            'audio_algebra.aa_mixer_toy.vicreg_var_loss': ( 'aa-mixer-toy.html#vicreg_var_loss',
                                                                                            'audio_algebra/aa_mixer_toy.py'),
                                            'audio_algebra.aa_mixer_toy.viz_aa_demo': ( 'aa-mixer-toy.html#viz_aa_demo',
                                                                                        'audio_algebra/aa_mixer_toy.py'),
                                            'audio_algebra.aa_mixer_toy.viz_given_batch': ( 'aa-mixer-toy.html#viz_given_batch',
                                                                                            'audio_algebra/aa_mixer_toy.py')},
            'audio_algebra.datasets': { 'audio_algebra.datasets.DualEffectsDataset': ( 'datasets.html#dualeffectsdataset',
                                                                                       'audio_algebra/datasets.py'),
                                        'audio_algebra.datasets.DualEffectsDataset.__getitem__': ( 'datasets.html#dualeffectsdataset.__getitem__',
                                                                                                   'audio_algebra/datasets.py'),
                                        'audio_algebra.datasets.DualEffectsDataset.__init__': ( 'datasets.html#dualeffectsdataset.__init__',
                                                                                                'audio_algebra/datasets.py'),
                                        'audio_algebra.datasets.DualEffectsDataset.__len__': ( 'datasets.html#dualeffectsdataset.__len__',
                                                                                               'audio_algebra/datasets.py'),
                                        'audio_algebra.datasets.DualEffectsDataset.apply_effect': ( 'datasets.html#dualeffectsdataset.apply_effect',
                                                                                                    'audio_algebra/datasets.py'),
                                        'audio_algebra.datasets.DualEffectsDataset.check_size': ( 'datasets.html#dualeffectsdataset.check_size',
                                                                                                  'audio_algebra/datasets.py'),
                                        'audio_algebra.datasets.DualEffectsDataset.get_next_chunk': ( 'datasets.html#dualeffectsdataset.get_next_chunk',
                                                                                                      'audio_algebra/datasets.py'),
                                        'audio_algebra.datasets.DualEffectsDataset.get_nonsilent_chunk': ( 'datasets.html#dualeffectsdataset.get_nonsilent_chunk',
                                                                                                           'audio_algebra/datasets.py'),
                                        'audio_algebra.datasets.DualEffectsDataset.load_file_ind': ( 'datasets.html#dualeffectsdataset.load_file_ind',
                                                                                                     'audio_algebra/datasets.py')},
            'audio_algebra.effects_explorer': {},
            'audio_algebra.given_models': { 'audio_algebra.given_models.CLAPDAE': ( 'given-models.html#clapdae',
                                                                                    'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.CLAPDAE.__init__': ( 'given-models.html#clapdae.__init__',
                                                                                             'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.CLAPDAE.decode': ( 'given-models.html#clapdae.decode',
                                                                                           'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.CLAPDAE.encode': ( 'given-models.html#clapdae.encode',
                                                                                           'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.CLAPDAE.forward': ( 'given-models.html#clapdae.forward',
                                                                                            'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.CLAPDAE.generate': ( 'given-models.html#clapdae.generate',
                                                                                             'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.CLAPDAE.setup': ( 'given-models.html#clapdae.setup',
                                                                                          'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.DMAE1d': ( 'given-models.html#dmae1d',
                                                                                   'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.DMAE1d.__init__': ( 'given-models.html#dmae1d.__init__',
                                                                                            'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.DMAE1d.decode': ( 'given-models.html#dmae1d.decode',
                                                                                          'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.DMAE1d.encode': ( 'given-models.html#dmae1d.encode',
                                                                                          'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.DMAE1d.forward': ( 'given-models.html#dmae1d.forward',
                                                                                           'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.DMAE1d.setup': ( 'given-models.html#dmae1d.setup',
                                                                                         'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.DVAEWrapper': ( 'given-models.html#dvaewrapper',
                                                                                        'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.DVAEWrapper.__init__': ( 'given-models.html#dvaewrapper.__init__',
                                                                                                 'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.DVAEWrapper.decode': ( 'given-models.html#dvaewrapper.decode',
                                                                                               'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.DVAEWrapper.encode': ( 'given-models.html#dvaewrapper.encode',
                                                                                               'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.DVAEWrapper.encode_it': ( 'given-models.html#dvaewrapper.encode_it',
                                                                                                  'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.DVAEWrapper.setup': ( 'given-models.html#dvaewrapper.setup',
                                                                                              'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.GivenModelClass': ( 'given-models.html#givenmodelclass',
                                                                                            'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.GivenModelClass.__init__': ( 'given-models.html#givenmodelclass.__init__',
                                                                                                     'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.GivenModelClass.decode': ( 'given-models.html#givenmodelclass.decode',
                                                                                                   'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.GivenModelClass.encode': ( 'given-models.html#givenmodelclass.encode',
                                                                                                   'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.GivenModelClass.forward': ( 'given-models.html#givenmodelclass.forward',
                                                                                                    'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.GivenModelClass.get_checkpoint': ( 'given-models.html#givenmodelclass.get_checkpoint',
                                                                                                           'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.GivenModelClass.match_sizes': ( 'given-models.html#givenmodelclass.match_sizes',
                                                                                                        'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.GivenModelClass.next_power_of_2': ( 'given-models.html#givenmodelclass.next_power_of_2',
                                                                                                            'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.GivenModelClass.setup': ( 'given-models.html#givenmodelclass.setup',
                                                                                                  'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.GivenModelClass.zero_pad_po2': ( 'given-models.html#givenmodelclass.zero_pad_po2',
                                                                                                         'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.MagDPhaseSpectrogramAE': ( 'given-models.html#magdphasespectrogramae',
                                                                                                   'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.MagDPhaseSpectrogramAE.__init__': ( 'given-models.html#magdphasespectrogramae.__init__',
                                                                                                            'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.MagDPhaseSpectrogramAE.decode': ( 'given-models.html#magdphasespectrogramae.decode',
                                                                                                          'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.MagDPhaseSpectrogramAE.encode': ( 'given-models.html#magdphasespectrogramae.encode',
                                                                                                          'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.MagSpectrogramAE': ( 'given-models.html#magspectrogramae',
                                                                                             'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.MagSpectrogramAE.__init__': ( 'given-models.html#magspectrogramae.__init__',
                                                                                                      'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.MagSpectrogramAE.decode': ( 'given-models.html#magspectrogramae.decode',
                                                                                                    'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.MagSpectrogramAE.encode': ( 'given-models.html#magspectrogramae.encode',
                                                                                                    'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.MelSpectrogramAE': ( 'given-models.html#melspectrogramae',
                                                                                             'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.MelSpectrogramAE.__init__': ( 'given-models.html#melspectrogramae.__init__',
                                                                                                      'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.MelSpectrogramAE.decode': ( 'given-models.html#melspectrogramae.decode',
                                                                                                    'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.MelSpectrogramAE.encode': ( 'given-models.html#melspectrogramae.encode',
                                                                                                    'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.MelSpectrogramAE.forward': ( 'given-models.html#melspectrogramae.forward',
                                                                                                     'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.RAVEWrapper': ( 'given-models.html#ravewrapper',
                                                                                        'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.RAVEWrapper.__init__': ( 'given-models.html#ravewrapper.__init__',
                                                                                                 'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.RAVEWrapper.decode': ( 'given-models.html#ravewrapper.decode',
                                                                                               'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.RAVEWrapper.encode': ( 'given-models.html#ravewrapper.encode',
                                                                                               'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.RAVEWrapper.forward': ( 'given-models.html#ravewrapper.forward',
                                                                                                'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.RAVEWrapper.setup': ( 'given-models.html#ravewrapper.setup',
                                                                                              'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.SpectrogramAE': ( 'given-models.html#spectrogramae',
                                                                                          'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.SpectrogramAE.__init__': ( 'given-models.html#spectrogramae.__init__',
                                                                                                   'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.SpectrogramAE.decode': ( 'given-models.html#spectrogramae.decode',
                                                                                                 'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.SpectrogramAE.encode': ( 'given-models.html#spectrogramae.encode',
                                                                                                 'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.StackedDiffAEWrapper': ( 'given-models.html#stackeddiffaewrapper',
                                                                                                 'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.StackedDiffAEWrapper.__init__': ( 'given-models.html#stackeddiffaewrapper.__init__',
                                                                                                          'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.StackedDiffAEWrapper.decode': ( 'given-models.html#stackeddiffaewrapper.decode',
                                                                                                        'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.StackedDiffAEWrapper.decode_stage1to2': ( 'given-models.html#stackeddiffaewrapper.decode_stage1to2',
                                                                                                                  'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.StackedDiffAEWrapper.decode_stage2': ( 'given-models.html#stackeddiffaewrapper.decode_stage2',
                                                                                                               'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.StackedDiffAEWrapper.encode': ( 'given-models.html#stackeddiffaewrapper.encode',
                                                                                                        'audio_algebra/given_models.py'),
                                            'audio_algebra.given_models.StackedDiffAEWrapper.setup': ( 'given-models.html#stackeddiffaewrapper.setup',
                                                                                                       'audio_algebra/given_models.py')},
            'audio_algebra.xae_dataset': {},
            'audio_algebra.xae_viz': { 'audio_algebra.xae_viz.add_proj_to_df': ('xae_viz.html#add_proj_to_df', 'audio_algebra/xae_viz.py'),
                                       'audio_algebra.xae_viz.do_time_avg': ('xae_viz.html#do_time_avg', 'audio_algebra/xae_viz.py'),
                                       'audio_algebra.xae_viz.make_pca_plotly': ( 'xae_viz.html#make_pca_plotly',
                                                                                  'audio_algebra/xae_viz.py'),
                                       'audio_algebra.xae_viz.make_umap_plotly': ( 'xae_viz.html#make_umap_plotly',
                                                                                   'audio_algebra/xae_viz.py'),
                                       'audio_algebra.xae_viz.sph_to_camera': ('xae_viz.html#sph_to_camera', 'audio_algebra/xae_viz.py'),
                                       'audio_algebra.xae_viz.sph_to_cart': ('xae_viz.html#sph_to_cart', 'audio_algebra/xae_viz.py'),
                                       'audio_algebra.xae_viz.xyz_to_camera': ('xae_viz.html#xyz_to_camera', 'audio_algebra/xae_viz.py')}}}
